-----------------------------------------------------problem--------------------------------------------------------

Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

给定一个字串，找到其中最长的回文串。

-----------------------------------------------------solution------------------------------------------------------

class Solution {
public:
    string longestPalindrome(string s) {
        if (s.empty()) return "";
        if (s.size() == 1) return s;
        int min_start = 0, max_len = 1;
        for (int i = 0; i < s.size();) {
            if (s.size() - i <= max_len / 2) break;
            int j = i, k = i;
            while (k < s.size()-1 && s[k+1] == s[k]) ++k; // Skip duplicate characters.
            i = k+1;
            while (k < s.size()-1 && j > 0 && s[k + 1] == s[j - 1]) { ++k; --j; } // Expand.
            int new_len = k - j + 1;
            if (new_len > max_len) { min_start = j; max_len = new_len; }
        }
    return s.substr(min_start, max_len);
    }
};

-----------------------------------------------------analyse------------------------------------------------------

答案分析：
首先来看时间复杂度，这个方法是一个for循环里面有两个while循环，为O（n^2）。要想得到最长的回文串，首先要遍历字符串，然后找到
回文的中间点再向外判断是否为回文串。回文串分成两种情况首先是xaabgf最长回文为aa,另一种为jkhghkdsds这种字符串的最长回文为khghk
，因此找到中间值后需要判断是哪类回文。无论是那种回文通过j，k两个数都可以正常增加长度继续判断。最后用C++的substt(i,length)方法
得到最长的回文子串。
