---------------------------------------------------question---------------------------------------------------

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number 
of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

--------------------------------------------------analyse----------------------------------------------------

给定的排过序的链表结构， 将链表按组逆序排列
需要一个反转函数， 以及一个循环获得链表长度，便于确定分组 因为有可能最后剩下的一小段不够长不排序。


--------------------------------------------------Solution------------------------------------------------------
#include<iostream>
using namespace std;
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* prehead = new ListNode(0), *cur, *pre, *nex;
        prehead->next = head;
        cur = prehead; pre = prehead;
        int ListLen = 0;
        if(k==1 || (head == NULL)) return head;
        while(cur = cur->next) ListLen++;
        while(ListLen >= k){
            cur = pre->next;
            nex = cur->next;         
            for(int i=1; i<k; ++i){
                cur->next = nex->next;
                nex->next = pre->next;
                pre->next = nex;
                nex = cur->next；////////注意此处交换的均为指针
            }
            pre = cur;
            ListLen-=k;
        }
        return prehead->next;
    }
};

